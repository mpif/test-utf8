1. 测试的目的：
在本地应用中查找字符串（非数据库方式查找），也可用于查找文件（如文件名是文件流生成的唯一hashcode）

2. 测试方法：
方式1：将所有字符串存放在一个文件中，然后遍历这个文件
方式2：将每个hashcode存放到不同目录的不同文件中，如hashcode：f67547a785d9b14e107c0f38cdd13d5e，
存放在/f6/75/目录下的f6_75.hashcode文件中，所有以f675开头的hashcode都会存放在这个文件中。

生成的第一级目录数为256个，第二级目录数为256个，最终用于存放hashcode的文件数为：256*256=65536个

com.messagesolution.performance.findstr.DataGenerator.java
作用：生成测试数据

com.messagesolution.performance.findstr.FindStrInAFile.java
作用：测试在同一个文件中查找某个字符串的速度

com.messagesolution.performance.findstr.FindStrInDiffFile.java
作用：测试在不同目录下的不同文件中查找某个字符串的速度

3. 测试结果：

测试数据写入性能：
(1)在同一个文件中：
a. 写入一百万个不重复的hashcode字符串：
	大小：32.4 MB (34,000,000 字节), 占用空间：32.4 MB (34,000,896 字节), 写入耗费时间:[1s]
b. 写入一千万个不重复的hashcode字符串：
	大小：324 MB (340,000,000 字节)，占用空间：324 MB (340,000,768 字节), 写入耗费时间:[11s]
c. 写入一亿个不重复的hashcode字符串：
	大小：3.16 GB (3,400,000,000 字节)，占用空间：3.16 GB (3,400,003,584 字节), 写入耗费时间:[127s]
(2)在不同目录的不同文件中：
a. 写入一百万个不重复的hashcode字符串：
	大小：32.4 MB (34,000,000 字节), 占用空间：256 MB (268,435,456 字节),AMillion, 写入耗费时间:[151s]
b. 写入一千万个不重复的hashcode字符串：
	大小：324 MB (340,000,000 字节)，占用空间：511 MB (535,941,120 字节)， TenMillion, 写入耗费时间:[265s]
c. 写入一亿个不重复的hashcode字符串：
	大小：3.16 GB (3,400,000,000 字节)， 3.28 GB (3,524,710,400 字节)， AThousandMillion, 写入耗费时间:[1369s]

测试数据查询性能：
(1)在同一个文件中：
a. 查找第一百万个hashcode字符串所花费的时间：[1188s]
b. 查找第一千万个hashcode字符串所花费的时间：[9125s]
c. 查找第一亿个hashcode字符串所花费的时间：[93367s]

(2)在不同目录的不同文件中：
a. 在一百万个hashcode字符串中查找某个字符串所花费的时间：[29s]， 由该hashcode最终定位到的文件：共15条记录，大小：510 字节 (510 字节)，占用空间：4.00 KB (4,096 字节)
b. 在一千万个hashcode字符串中查找某个字符串所花费的时间：[39s]， 由该hashcode最终定位到的文件：共169条记录，大小：5.61 KB (5,746 字节)，占用空间：8.00 KB (8,192 字节)
c. 在一亿个hashcode字符串中查找某个字符串所花费的时间：[67s]， 由该hashcode最终定位到的文件：共1617条记录，大小：53.6 KB (54,978 字节)，占用空间：56.0 KB (57,344 字节)


总结：
	1. 如果是在单个文件中查找比较靠前的字符串，速度其实差不多。但是查找越往后的字符串，速度越慢。
	2. 第二种方式，查找速度比较快，速度比较平均。不像第一种方式，查找第一个字符串和查找最后一个字符串的速度差很多。





































